(define (domain myDomain)
(:requirements :strips :typing :fluents)
(:types Thing integer )

(:predicates
    ( powerState_Read ?thing - Thing)
    ( powerState ?thing - Thing)
)

(:functions
    (brightnessState ?thing - Thing)
    (brightnessState_input ?thing - Thing ?v0 - integer)
    (increaseBrightnessInput ?thing - Thing ?v1 - integer)
)

(:action readProperty_status
    :parameters(?thing - Thing)
    :precondition()
    :effect(powerState_Read ?thing)
)
(:action writeProperty_brightness
    :parameters( ?thing - Thing ?v0 - integer)
    :precondition(powerState ?thing)
    :effect(assign (brightnessState ?thing)(brightnessState_input ?thing ?v0))
)
(:action invokeAction_turnOn
    :parameters( ?thing - Thing)
    :precondition(not(powerState ?thing))
    :effect(powerState ?thing)
)
(:action invokeAction_turnOff
    :parameters( ?thing - Thing)
    :precondition(powerState ?thing)
    :effect(not(powerState ?thing))
)
(:action invokeAction_increaseBrightnessByValue
    :parameters( ?thing - Thing ?v1 - integer)
    :precondition(powerState ?thing)
    :effect(assign (brightnessState  ?thing) (+ (brightnessState  ?thing) (increaseBrightnessInput  ?thing ?v1)))
)
)